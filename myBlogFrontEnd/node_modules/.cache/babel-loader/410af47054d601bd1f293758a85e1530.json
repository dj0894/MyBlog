{"ast":null,"code":"const articles = [{\n  name: 'learn-react',\n  title: 'The Fastest Way to Learn React',\n  content: [`There is a ton of options when it comes to client-side frameworks, and often it can be a little confusing for beginners to choose from a wide range of choices. Often these choices boil down to Angular, React, and Vue. “So, which is the best choice?”, you may ask. I can’t help but give you the clichéd answer that there isn’t really the best choice. Just pick one and learn it thoroughly, would be the best advice to give, because all the three choices eventually boil down to very similar working strategies.\n            In case you have made up your mind to start learning React, I shall do my best to give you a thorough introduction of the same!\n            One of the reasons why React can seem weird to a beginner is that there isn’t a separation of concerns in terms of writing HTML and writing React code. This can seem awkward for most beginners, because when building any application’s client-side, we usually use a template engine like EJS, Handlebars, Mustache, and so on. So the shift to a client-side library which merges the use of HTML and JavaScript can be a little tough!\n            The very first concept to start with React is called JSX, which stands for JavaScript XML. Basically, JSX allows us to write HTML within React itself. Although there are a few changes, in order to write JSX (which is what every React component eventually renders) you just need to know the basic tags of HTML!\n                \n            React (and most other client-side frameworks) primarily work by rendering components. This enables a developer to build one component, and re-use it multiple times as required. This is a powerful advantage over using a template engine, because you no longer have to worry about writing code to build all parts of the UI! To illustrate this, consider the example of Youtube’s homepage.\n            Here, notice how all the video suggestion cards have a similar structure to them.A thumbnail, a title below the thumbnail, the channel name below that, and some more details towards the bottom of the card.Using a client side library like React, you can build a generic component to display all of the above, and re - use that same component multiple times.\n            To leverage this concept, it is important to start thinking of the UI as a structured collection of components.These components can also communicate with one another asynchronously, which can save you some costly page reloads!\n            “But, how do I build these components ?”, you may wonder.Building components mainly comes down to understanding what you want to render for the user, at that instant of time.If you can visualize the end result before you start writing the code, it can make your job a little easier.\n            React offers two ways to define the components.You can either choose to build a class-based component, or you can build a functional component.As the names suggest, the former uses the concept of ES6 Javascript classes(if you are not familiar with it, click here to learn about it) and the latter uses plain - old Javascript functions.`]\n}, {\n  name: 'learn-node',\n  title: 'Guiding Principles of Rest',\n  content: [`Guiding Principles of REST\n            \n            Client–server– By separating the user interface concerns from the data storage concerns, we improve the portability of the user interface across multiple platforms and improve scalability by simplifying the server components.\n            Stateless – Each request from client to server must contain all of the information necessary to understand the request, and cannot take advantage of any stored context on the server. Session state is therefore kept entirely on the client.\n            Cacheable – Cache constraints require that the data within a response to a request be implicitly or explicitly labeled as cacheable or non-cacheable. If a response is cacheable, then a client cache is given the right to reuse that response data for later, equivalent requests.\n            Uniform interface – By applying the software engineering principle of generality to the component interface, the overall system architecture is simplified and the visibility of interactions is improved. In order to obtain a uniform interface, multiple architectural constraints are needed to guide the behavior of components. REST is defined by four interface constraints: identification of resources; manipulation of resources through representations; self-descriptive messages; and, hypermedia as the engine of application state.\n            Layered system – The layered system style allows an architecture to be composed of hierarchical layers by constraining component behavior such that each component cannot “see” beyond the immediate layer with which they are interacting.\n            Code on demand (optional) – REST allows client functionality to be extended by downloading and executing code in the form of applets or scripts. This simplifies clients by reducing the number of features required to be pre-implemented.     `,,]\n}, {\n  name: 'my-thoughts-on-resumes',\n  title: 'My Thoughts on Resumes',\n  content: [`Today is the day I talk about something which scares most people: resumes.\n            In reality, I'm not sure why people have such a hard time with proin congue\n            ligula id risus posuere, vel eleifend ex egestas. Sed in turpis leo. \n            Aliquam malesuada in massa tincidunt egestas. Nam consectetur varius turpis, \n            non porta arcu porttitor non. In tincidunt vulputate nulla quis egestas. Ut \n            eleifend ut ipsum non fringilla. Praesent imperdiet nulla nec est luctus, at \n            sodales purus euismod.`, `Donec vel mauris lectus. Etiam nec lectus urna. Sed sodales ultrices dapibus. \n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`, `Etiam nec lectus urna. Sed sodales ultrices dapibus. \n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`]\n}];\nexport default articles;","map":{"version":3,"sources":["/Users/deepikajha/Documents/MSIS/Summer2021/ReactProjects/my-blog/myBlogFrontEnd/src/pages/ArticleContentJson.js"],"names":["articles","name","title","content"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,CACb;AACIC,EAAAA,IAAI,EAAE,aADV;AAEIC,EAAAA,KAAK,EAAE,gCAFX;AAGIC,EAAAA,OAAO,EAAE,CACJ;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4VAViB;AAHb,CADa,EAgBV;AACCF,EAAAA,IAAI,EAAE,YADP;AAECC,EAAAA,KAAK,EAAE,4BAFR;AAGCC,EAAAA,OAAO,EAAE,CACJ;AACb;AACA;AACA;AACA;AACA;AACA;AACA,6PARiB;AAHV,CAhBU,EA8BV;AACCF,EAAAA,IAAI,EAAE,wBADP;AAECC,EAAAA,KAAK,EAAE,wBAFR;AAGCC,EAAAA,OAAO,EAAE,CACJ;AACb;AACA;AACA;AACA;AACA;AACA,mCAPiB,EAQJ;AACb;AACA;AACA;AACA;AACA,uEAbiB,EAcJ;AACb;AACA;AACA;AACA;AACA,uEAnBiB;AAHV,CA9BU,CAAjB;AAyDA,eAAeH,QAAf","sourcesContent":["const articles = [\n    {\n        name: 'learn-react',\n        title: 'The Fastest Way to Learn React',\n        content: [\n            `There is a ton of options when it comes to client-side frameworks, and often it can be a little confusing for beginners to choose from a wide range of choices. Often these choices boil down to Angular, React, and Vue. “So, which is the best choice?”, you may ask. I can’t help but give you the clichéd answer that there isn’t really the best choice. Just pick one and learn it thoroughly, would be the best advice to give, because all the three choices eventually boil down to very similar working strategies.\n            In case you have made up your mind to start learning React, I shall do my best to give you a thorough introduction of the same!\n            One of the reasons why React can seem weird to a beginner is that there isn’t a separation of concerns in terms of writing HTML and writing React code. This can seem awkward for most beginners, because when building any application’s client-side, we usually use a template engine like EJS, Handlebars, Mustache, and so on. So the shift to a client-side library which merges the use of HTML and JavaScript can be a little tough!\n            The very first concept to start with React is called JSX, which stands for JavaScript XML. Basically, JSX allows us to write HTML within React itself. Although there are a few changes, in order to write JSX (which is what every React component eventually renders) you just need to know the basic tags of HTML!\n                \n            React (and most other client-side frameworks) primarily work by rendering components. This enables a developer to build one component, and re-use it multiple times as required. This is a powerful advantage over using a template engine, because you no longer have to worry about writing code to build all parts of the UI! To illustrate this, consider the example of Youtube’s homepage.\n            Here, notice how all the video suggestion cards have a similar structure to them.A thumbnail, a title below the thumbnail, the channel name below that, and some more details towards the bottom of the card.Using a client side library like React, you can build a generic component to display all of the above, and re - use that same component multiple times.\n            To leverage this concept, it is important to start thinking of the UI as a structured collection of components.These components can also communicate with one another asynchronously, which can save you some costly page reloads!\n            “But, how do I build these components ?”, you may wonder.Building components mainly comes down to understanding what you want to render for the user, at that instant of time.If you can visualize the end result before you start writing the code, it can make your job a little easier.\n            React offers two ways to define the components.You can either choose to build a class-based component, or you can build a functional component.As the names suggest, the former uses the concept of ES6 Javascript classes(if you are not familiar with it, click here to learn about it) and the latter uses plain - old Javascript functions.`,\n        ]\n    }, {\n        name: 'learn-node',\n        title: 'Guiding Principles of Rest',\n        content: [\n            `Guiding Principles of REST\n            \n            Client–server– By separating the user interface concerns from the data storage concerns, we improve the portability of the user interface across multiple platforms and improve scalability by simplifying the server components.\n            Stateless – Each request from client to server must contain all of the information necessary to understand the request, and cannot take advantage of any stored context on the server. Session state is therefore kept entirely on the client.\n            Cacheable – Cache constraints require that the data within a response to a request be implicitly or explicitly labeled as cacheable or non-cacheable. If a response is cacheable, then a client cache is given the right to reuse that response data for later, equivalent requests.\n            Uniform interface – By applying the software engineering principle of generality to the component interface, the overall system architecture is simplified and the visibility of interactions is improved. In order to obtain a uniform interface, multiple architectural constraints are needed to guide the behavior of components. REST is defined by four interface constraints: identification of resources; manipulation of resources through representations; self-descriptive messages; and, hypermedia as the engine of application state.\n            Layered system – The layered system style allows an architecture to be composed of hierarchical layers by constraining component behavior such that each component cannot “see” beyond the immediate layer with which they are interacting.\n            Code on demand (optional) – REST allows client functionality to be extended by downloading and executing code in the form of applets or scripts. This simplifies clients by reducing the number of features required to be pre-implemented.     `,\n            ,\n        ]\n    }, {\n        name: 'my-thoughts-on-resumes',\n        title: 'My Thoughts on Resumes',\n        content: [\n            `Today is the day I talk about something which scares most people: resumes.\n            In reality, I'm not sure why people have such a hard time with proin congue\n            ligula id risus posuere, vel eleifend ex egestas. Sed in turpis leo. \n            Aliquam malesuada in massa tincidunt egestas. Nam consectetur varius turpis, \n            non porta arcu porttitor non. In tincidunt vulputate nulla quis egestas. Ut \n            eleifend ut ipsum non fringilla. Praesent imperdiet nulla nec est luctus, at \n            sodales purus euismod.`,\n            `Donec vel mauris lectus. Etiam nec lectus urna. Sed sodales ultrices dapibus. \n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\n            `Etiam nec lectus urna. Sed sodales ultrices dapibus. \n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\n        ]\n    },\n];\n\nexport default articles;"]},"metadata":{},"sourceType":"module"}