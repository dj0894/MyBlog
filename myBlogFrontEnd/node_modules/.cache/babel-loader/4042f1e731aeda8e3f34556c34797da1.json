{"ast":null,"code":"const articles = [{\n  name: 'learn-react',\n  title: 'The Fastest Way to Learn React',\n  content: [`There is a ton of options when it comes to client-side frameworks, and often it can be a little confusing for beginners to choose from a wide range of choices. Often these choices boil down to Angular, React, and Vue. “So, which is the best choice?”, you may ask. I can’t help but give you the clichéd answer that there isn’t really the best choice. Just pick one and learn it thoroughly, would be the best advice to give, because all the three choices eventually boil down to very similar working strategies.\n            In case you have made up your mind to start learning React, I shall do my best to give you a thorough introduction of the same!\n            One of the reasons why React can seem weird to a beginner is that there isn’t a separation of concerns in terms of writing HTML and writing React code. This can seem awkward for most beginners, because when building any application’s client-side, we usually use a template engine like EJS, Handlebars, Mustache, and so on. So the shift to a client-side library which merges the use of HTML and JavaScript can be a little tough!\n            The very first concept to start with React is called JSX, which stands for JavaScript XML. Basically, JSX allows us to write HTML within React itself. Although there are a few changes, in order to write JSX (which is what every React component eventually renders) you just need to know the basic tags of HTML!\n                \n            React (and most other client-side frameworks) primarily work by rendering components. This enables a developer to build one component, and re-use it multiple times as required. This is a powerful advantage over using a template engine, because you no longer have to worry about writing code to build all parts of the UI! To illustrate this, consider the example of Youtube’s homepage.\n            Here, notice how all the video suggestion cards have a similar structure to them.A thumbnail, a title below the thumbnail, the channel name below that, and some more details towards the bottom of the card.Using a client side library like React, you can build a generic component to display all of the above, and re - use that same component multiple times.\n            To leverage this concept, it is important to start thinking of the UI as a structured collection of components.These components can also communicate with one another asynchronously, which can save you some costly page reloads!\n            “But, how do I build these components ?”, you may wonder.Building components mainly comes down to understanding what you want to render for the user, at that instant of time.If you can visualize the end result before you start writing the code, it can make your job a little easier.\n            React offers two ways to define the components.You can either choose to build a class-based component, or you can build a functional component.As the names suggest, the former uses the concept of ES6 Javascript classes(if you are not familiar with it, click here to learn about it) and the latter uses plain - old Javascript functions.`]\n}, {\n  name: 'learn-node',\n  title: 'Build Node.js RESTful APIs in 10 Minutes',\n  content: [`What is REST?\nREST is an acronym for Representational State Transfer. It is web standards architecture and HTTP Protocol. The REST architectural style describes six constraints that were originally communicated by Roy Fielding in his doctoral dissertation and defines the basis of RESTful-style as:\n\nUniform Interface\nStateless\nCacheable\nClient-Server\nLayered System\nCode on Demand (optional)\nRESTful applications use HTTP requests to perform four operations termed as CRUD (C: create, R: read, U: update, and D: delete). Create and/or update is used to post data, get for reading/listing data, and delete to remove data.\n\nRESTful is composed of methods such as; base URL, URL, media types, etc.\n\nIn this tutorial, we will learn how to create a RESTful API using Node.js.\n\nTools:\nNode.js\nMongoDB\nText editor (Atom, Sublime, etc) (Read more: Best Text Editor? Atom vs Sublime vs Visual Studio Code vs Vim)\nPostman\nGetting started\nFor the purpose of this tutorial, I’ll work you through creating a RESTful API. To achieve this, we will create a RESTful todo list API (i.e. endpoints that will create a task, get or read list of all tasks, read a particular task, delete a task, and update a task).\n\nAssumptions\nI presume that you already have your environment set up (i.e Node.js and MongoDB is installed).\n\nKindly run npm -v and mongo --version as these will show you the version of NPM and MongoDB installed on your machine.\n\nIf you don’t have it installed, kindly go through this link on how to install it in order for us to create a server in Node and Mongodb.\n\nIf you do have Node and MongoDB installed, let's begin the tutorial with the following basic steps.\n\nOpen your terminal and kindly follow the following steps\n\nCreate a Folder name todoListApi - mkdir todoListApi\n\nNavigate to the root of your newly created folder - cd todoListApi\n\nCreate a package.json file - npm init\nPackage.json is a file that gives the necessary information to npm which allows it to identify the project as well as handle the project's dependencies.\nnpm init will prompt you to enter some information such as the app name, description, version, author, keyword and also ask if what you see is what you like.\nYou should have something like this eventually.enter image description hereKindly type yes and press enter to complete the creation of our package.json. Having done all these, your folder structure should look like this:enter image description here\n\nCreate a file called server.js - touch server.js.\nIn this server, we will writing the protocols to create our server.\n\nCreate a folder called api - mkdir api\nInside this folder called api, create three separate folders called models, routes, and controllers by running mkdir api/controllers api/models api/routes\nenter image description here\n\nCreate todoListController.js in the api/controller folder, todoListRoutes.js in the routes folder, and todoListModel in the model folder - touch api/controllers/todoListController.js api/models/todoListModel.js api/routes/todoListRoutes.js\n\nOur folder structure should look like this now:\nenter image description here\n\nServer setup\nLet's install express and nodmon, express will be used to create the server while nodmon will help us to keep track of changes to our application by watching changed files and automatically restart the server.\n\nnpm install --save-dev nodemon\n\nnpm install express --save\n\nOn successful installation, your package.json file will be modified to have the two newly installed packages.\n\nOpen the package.json file and add this task to the script\n\"start\": \"nodemon server.js\"\nenter image description here\n\nOpen the server.js file and type/copy the code below into it\nvar express = require('express'),\n  app = express(),\n  port = process.env.PORT || 3000;\n\napp.listen(port);\n\nconsole.log('todo list RESTful API server started on: ' + port);\n\nenter image description here\n\n3.On your terminal, run npm run start this will start the server and then you will see\n\ntodo list RESTful API server started on: 3000\n\nSetting up the schema\nFirsr of all, let’s install mongoose - npm install mongoose --save\n\nWhy Mongoose?\nMongoose is what we will use to interact with a MongoDB(Database) instance.\nAfter installation, open the todoListModel.js file in your api/models folder and type the following code into the file and save.\n\n\n'use strict';\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\n\n\nvar TaskSchema = new Schema({\n  name: {\n    type: String,\n    required: 'Kindly enter the name of the task'\n  },\n  Created_date: {\n    type: Date,\n    default: Date.now\n  },\n  status: {\n    type: [{\n      type: String,\n      enum: ['pending', 'ongoing', 'completed']\n    }],\n    default: ['pending']\n  }\n});\n\nmodule.exports = mongoose.model('Tasks', TaskSchema);\nFrom the code above, we required the mongoose in our file and then, we create a model of how our collection should look like.\nAs you can see, it the task collection(table) will contain a name: a string, and the date it was created. It also contains task status which we have defined as pending - a default value for every task created.\n\nSetting up the routes\nRouting refers to determining how an application responds to a client request for a specific endpoint, which is a URI (or path) and a specific HTTP request method (GET, POST, and so on).\nEach of our routes has different route handler functions, which are executed when the route is matched.\nBelow we have defined two basic routes(‘/tasks’, and ‘/tasks/taskId’) with different methods\n‘/tasks’ has to methods(‘GET’ and ‘POST’), while ‘/tasks/taskId’ has GET, PUT and DELETE.\nAs you can see, we required the controller so each of the routes methods can call it’s respective handler function.\n\nTo do this, open the todoListRoutes.js file in the route folder and paste the code snippet below into\n\n'use strict';\nmodule.exports = function(app) {\n  var todoList = require('../controllers/todoListController');\n\n  // todoList Routes\n  app.route('/tasks')\n    .get(todoList.list_all_tasks)\n    .post(todoList.create_a_task);\n\n\n  app.route('/tasks/:taskId')\n    .get(todoList.read_a_task)\n    .put(todoList.update_a_task)\n    .delete(todoList.delete_a_task);\n};\n\nSetting up the controller\nOpen todoListController.js file with your text editor( Sublime, Atom e.t.c) and let’s deep dive into coding.\n\nIn this controller, we would be writing five(5) different functions namely: list_all_tasks, create_a_task, read_a_task, update_a_task, delete_a_task. We will exported each of the functions for us to use in our routes.\nEach of these functions uses different mongoose methods such as find, findById, findOneAndUpdate, save and remove.\n\n'use strict';\n\n\nvar mongoose = require('mongoose'),\n  Task = mongoose.model('Tasks');\n\nexports.list_all_tasks = function(req, res) {\n  Task.find({}, function(err, task) {\n    if (err)\n      res.send(err);\n    res.json(task);\n  });\n};\n\n\n\n\nexports.create_a_task = function(req, res) {\n  var new_task = new Task(req.body);\n  new_task.save(function(err, task) {\n    if (err)\n      res.send(err);\n    res.json(task);\n  });\n};\n\n\nexports.read_a_task = function(req, res) {\n  Task.findById(req.params.taskId, function(err, task) {\n    if (err)\n      res.send(err);\n    res.json(task);\n  });\n};\n\n\nexports.update_a_task = function(req, res) {\n  Task.findOneAndUpdate({_id: req.params.taskId}, req.body, {new: true}, function(err, task) {\n    if (err)\n      res.send(err);\n    res.json(task);\n  });\n};\n\n\nexports.delete_a_task = function(req, res) {\n\n\n  Task.remove({\n    _id: req.params.taskId\n  }, function(err, task) {\n    if (err)\n      res.send(err);\n    res.json({ message: 'Task successfully deleted' });\n  });\n};\n\n\n\nPutting everything together\nEarlier on, we had a minimal code for our server to be up and running in the server.js file.\nIn this section we will be connecting our handlers(controllers), database, the created models, body parser and the created routes together.\n\nOpen the server.js file created awhile ago and follow the following steps to put everything together.\nEssentially, you will be replacing the code in your server.js with the code snippet from this section\n\nConnect your database by adding a url to the mongoose instance connection\nLoad the created model - task\nInstall bodyParser and use\nbodyParser Parse incoming request bodies in a middleware before your handlers, available under the req.body property.\nIt exposes various factories to create middlewares. All middlewares will populate the req.bodyproperty with the parsed body, or an empty object ({}) if there was no body to parse (or an error was returned).\nRegister our created routes in the server\nvar express = require('express'),\n  app = express(),\n  port = process.env.PORT || 3000,\n  mongoose = require('mongoose'),\n  Task = require('./api/models/todoListModel'), //created model loading here\n  bodyParser = require('body-parser');\n  \n// mongoose instance connection url connection\nmongoose.Promise = global.Promise;\nmongoose.connect('mongodb://localhost/Tododb'); \n\n\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\n\nvar routes = require('./api/routes/todoListRoutes'); //importing route\nroutes(app); //register the route\n\n\napp.listen(port);\n\n\nconsole.log('todo list RESTful API server started on: ' + port);\n\n5.Start MongoDB Server\n\nOpen your terminal and run mongod\n\nThis will start your MongoDB server and then, node server could connect to the MongoDB instance. Once your MongoDB server is running, restart your node server by running: rs on your nodemon running terminal.\n\nTesting via Postman\nNow that everything is now connected, let’s test each of the routes and the respective methods.\n\nOpen your postman and type:\n\nhttp://localhost:3000/tasks in the enter request URL section and press enter.\nScreen Shot 2017-03-03 at 8.15.35 PM.png\nOn enter, you should see “[]” because there is nothing in the database yet.\nOn the same address, change the method to POST, click body and select “x-www-form-urlencoded”.\nThen, enter name as the key and the corresponding task name as value.\nAfter this, click on send button.\nThis should give you a response 200 ok\nScreen Shot 2017-03-03 at 8.12.55 PM.png\n\nAdding a middleware\nHaving done all these, what happens if we entered a wrong route? say you entered 'http://localhost:3000/task', It responds with a message “Cannot GET /task”. Let’s add express middleware which could be used to return more interactive messages.\n\nMiddlewares basically intercepts incoming http request and as such you can use them to perform several operations ranging from authentication to validations etc.\n\nTo do this, open your server.js file and paste the code snippet into it.\n\napp.use(function(req, res) {\n  res.status(404).send({url: req.originalUrl + ' not found'})\n});\nThe snippet above helps to redirect and respond whenever a wrong route is entered on the site.`, ``]\n}, {\n  name: 'my-thoughts-on-resumes',\n  title: 'My Thoughts on Resumes',\n  content: [`Today is the day I talk about something which scares most people: resumes.\n            In reality, I'm not sure why people have such a hard time with proin congue\n            ligula id risus posuere, vel eleifend ex egestas. Sed in turpis leo. \n            Aliquam malesuada in massa tincidunt egestas. Nam consectetur varius turpis, \n            non porta arcu porttitor non. In tincidunt vulputate nulla quis egestas. Ut \n            eleifend ut ipsum non fringilla. Praesent imperdiet nulla nec est luctus, at \n            sodales purus euismod.`, `Donec vel mauris lectus. Etiam nec lectus urna. Sed sodales ultrices dapibus. \n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`, `Etiam nec lectus urna. Sed sodales ultrices dapibus. \n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`]\n}];\nexport default articles;","map":{"version":3,"sources":["/Users/deepikajha/Documents/MSIS/Summer2021/ReactProjects/my-blog/myBlogFrontEnd/src/pages/ArticleContentJson.js"],"names":["articles","name","title","content"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,CACb;AACIC,EAAAA,IAAI,EAAE,aADV;AAEIC,EAAAA,KAAK,EAAE,gCAFX;AAGIC,EAAAA,OAAO,EAAE,CACJ;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4VAViB;AAHb,CADa,EAgBV;AACCF,EAAAA,IAAI,EAAE,YADP;AAECC,EAAAA,KAAK,EAAE,0CAFR;AAGCC,EAAAA,OAAO,EAAE,CACJ;AACbrRiB,EAsRJ,EAtRI;AAHV,CAhBU,EA2SV;AACCF,EAAAA,IAAI,EAAE,wBADP;AAECC,EAAAA,KAAK,EAAE,wBAFR;AAGCC,EAAAA,OAAO,EAAE,CACJ;AACb;AACA;AACA;AACA;AACA;AACA,mCAPiB,EAQJ;AACb;AACA;AACA;AACA;AACA,uEAbiB,EAcJ;AACb;AACA;AACA;AACA;AACA,uEAnBiB;AAHV,CA3SU,CAAjB;AAsUA,eAAeH,QAAf","sourcesContent":["const articles = [\n    {\n        name: 'learn-react',\n        title: 'The Fastest Way to Learn React',\n        content: [\n            `There is a ton of options when it comes to client-side frameworks, and often it can be a little confusing for beginners to choose from a wide range of choices. Often these choices boil down to Angular, React, and Vue. “So, which is the best choice?”, you may ask. I can’t help but give you the clichéd answer that there isn’t really the best choice. Just pick one and learn it thoroughly, would be the best advice to give, because all the three choices eventually boil down to very similar working strategies.\n            In case you have made up your mind to start learning React, I shall do my best to give you a thorough introduction of the same!\n            One of the reasons why React can seem weird to a beginner is that there isn’t a separation of concerns in terms of writing HTML and writing React code. This can seem awkward for most beginners, because when building any application’s client-side, we usually use a template engine like EJS, Handlebars, Mustache, and so on. So the shift to a client-side library which merges the use of HTML and JavaScript can be a little tough!\n            The very first concept to start with React is called JSX, which stands for JavaScript XML. Basically, JSX allows us to write HTML within React itself. Although there are a few changes, in order to write JSX (which is what every React component eventually renders) you just need to know the basic tags of HTML!\n                \n            React (and most other client-side frameworks) primarily work by rendering components. This enables a developer to build one component, and re-use it multiple times as required. This is a powerful advantage over using a template engine, because you no longer have to worry about writing code to build all parts of the UI! To illustrate this, consider the example of Youtube’s homepage.\n            Here, notice how all the video suggestion cards have a similar structure to them.A thumbnail, a title below the thumbnail, the channel name below that, and some more details towards the bottom of the card.Using a client side library like React, you can build a generic component to display all of the above, and re - use that same component multiple times.\n            To leverage this concept, it is important to start thinking of the UI as a structured collection of components.These components can also communicate with one another asynchronously, which can save you some costly page reloads!\n            “But, how do I build these components ?”, you may wonder.Building components mainly comes down to understanding what you want to render for the user, at that instant of time.If you can visualize the end result before you start writing the code, it can make your job a little easier.\n            React offers two ways to define the components.You can either choose to build a class-based component, or you can build a functional component.As the names suggest, the former uses the concept of ES6 Javascript classes(if you are not familiar with it, click here to learn about it) and the latter uses plain - old Javascript functions.`,\n        ]\n    }, {\n        name: 'learn-node',\n        title: 'Build Node.js RESTful APIs in 10 Minutes',\n        content: [\n            `What is REST?\nREST is an acronym for Representational State Transfer. It is web standards architecture and HTTP Protocol. The REST architectural style describes six constraints that were originally communicated by Roy Fielding in his doctoral dissertation and defines the basis of RESTful-style as:\n\nUniform Interface\nStateless\nCacheable\nClient-Server\nLayered System\nCode on Demand (optional)\nRESTful applications use HTTP requests to perform four operations termed as CRUD (C: create, R: read, U: update, and D: delete). Create and/or update is used to post data, get for reading/listing data, and delete to remove data.\n\nRESTful is composed of methods such as; base URL, URL, media types, etc.\n\nIn this tutorial, we will learn how to create a RESTful API using Node.js.\n\nTools:\nNode.js\nMongoDB\nText editor (Atom, Sublime, etc) (Read more: Best Text Editor? Atom vs Sublime vs Visual Studio Code vs Vim)\nPostman\nGetting started\nFor the purpose of this tutorial, I’ll work you through creating a RESTful API. To achieve this, we will create a RESTful todo list API (i.e. endpoints that will create a task, get or read list of all tasks, read a particular task, delete a task, and update a task).\n\nAssumptions\nI presume that you already have your environment set up (i.e Node.js and MongoDB is installed).\n\nKindly run npm -v and mongo --version as these will show you the version of NPM and MongoDB installed on your machine.\n\nIf you don’t have it installed, kindly go through this link on how to install it in order for us to create a server in Node and Mongodb.\n\nIf you do have Node and MongoDB installed, let's begin the tutorial with the following basic steps.\n\nOpen your terminal and kindly follow the following steps\n\nCreate a Folder name todoListApi - mkdir todoListApi\n\nNavigate to the root of your newly created folder - cd todoListApi\n\nCreate a package.json file - npm init\nPackage.json is a file that gives the necessary information to npm which allows it to identify the project as well as handle the project's dependencies.\nnpm init will prompt you to enter some information such as the app name, description, version, author, keyword and also ask if what you see is what you like.\nYou should have something like this eventually.enter image description hereKindly type yes and press enter to complete the creation of our package.json. Having done all these, your folder structure should look like this:enter image description here\n\nCreate a file called server.js - touch server.js.\nIn this server, we will writing the protocols to create our server.\n\nCreate a folder called api - mkdir api\nInside this folder called api, create three separate folders called models, routes, and controllers by running mkdir api/controllers api/models api/routes\nenter image description here\n\nCreate todoListController.js in the api/controller folder, todoListRoutes.js in the routes folder, and todoListModel in the model folder - touch api/controllers/todoListController.js api/models/todoListModel.js api/routes/todoListRoutes.js\n\nOur folder structure should look like this now:\nenter image description here\n\nServer setup\nLet's install express and nodmon, express will be used to create the server while nodmon will help us to keep track of changes to our application by watching changed files and automatically restart the server.\n\nnpm install --save-dev nodemon\n\nnpm install express --save\n\nOn successful installation, your package.json file will be modified to have the two newly installed packages.\n\nOpen the package.json file and add this task to the script\n\"start\": \"nodemon server.js\"\nenter image description here\n\nOpen the server.js file and type/copy the code below into it\nvar express = require('express'),\n  app = express(),\n  port = process.env.PORT || 3000;\n\napp.listen(port);\n\nconsole.log('todo list RESTful API server started on: ' + port);\n\nenter image description here\n\n3.On your terminal, run npm run start this will start the server and then you will see\n\ntodo list RESTful API server started on: 3000\n\nSetting up the schema\nFirsr of all, let’s install mongoose - npm install mongoose --save\n\nWhy Mongoose?\nMongoose is what we will use to interact with a MongoDB(Database) instance.\nAfter installation, open the todoListModel.js file in your api/models folder and type the following code into the file and save.\n\n\n'use strict';\nvar mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\n\n\nvar TaskSchema = new Schema({\n  name: {\n    type: String,\n    required: 'Kindly enter the name of the task'\n  },\n  Created_date: {\n    type: Date,\n    default: Date.now\n  },\n  status: {\n    type: [{\n      type: String,\n      enum: ['pending', 'ongoing', 'completed']\n    }],\n    default: ['pending']\n  }\n});\n\nmodule.exports = mongoose.model('Tasks', TaskSchema);\nFrom the code above, we required the mongoose in our file and then, we create a model of how our collection should look like.\nAs you can see, it the task collection(table) will contain a name: a string, and the date it was created. It also contains task status which we have defined as pending - a default value for every task created.\n\nSetting up the routes\nRouting refers to determining how an application responds to a client request for a specific endpoint, which is a URI (or path) and a specific HTTP request method (GET, POST, and so on).\nEach of our routes has different route handler functions, which are executed when the route is matched.\nBelow we have defined two basic routes(‘/tasks’, and ‘/tasks/taskId’) with different methods\n‘/tasks’ has to methods(‘GET’ and ‘POST’), while ‘/tasks/taskId’ has GET, PUT and DELETE.\nAs you can see, we required the controller so each of the routes methods can call it’s respective handler function.\n\nTo do this, open the todoListRoutes.js file in the route folder and paste the code snippet below into\n\n'use strict';\nmodule.exports = function(app) {\n  var todoList = require('../controllers/todoListController');\n\n  // todoList Routes\n  app.route('/tasks')\n    .get(todoList.list_all_tasks)\n    .post(todoList.create_a_task);\n\n\n  app.route('/tasks/:taskId')\n    .get(todoList.read_a_task)\n    .put(todoList.update_a_task)\n    .delete(todoList.delete_a_task);\n};\n\nSetting up the controller\nOpen todoListController.js file with your text editor( Sublime, Atom e.t.c) and let’s deep dive into coding.\n\nIn this controller, we would be writing five(5) different functions namely: list_all_tasks, create_a_task, read_a_task, update_a_task, delete_a_task. We will exported each of the functions for us to use in our routes.\nEach of these functions uses different mongoose methods such as find, findById, findOneAndUpdate, save and remove.\n\n'use strict';\n\n\nvar mongoose = require('mongoose'),\n  Task = mongoose.model('Tasks');\n\nexports.list_all_tasks = function(req, res) {\n  Task.find({}, function(err, task) {\n    if (err)\n      res.send(err);\n    res.json(task);\n  });\n};\n\n\n\n\nexports.create_a_task = function(req, res) {\n  var new_task = new Task(req.body);\n  new_task.save(function(err, task) {\n    if (err)\n      res.send(err);\n    res.json(task);\n  });\n};\n\n\nexports.read_a_task = function(req, res) {\n  Task.findById(req.params.taskId, function(err, task) {\n    if (err)\n      res.send(err);\n    res.json(task);\n  });\n};\n\n\nexports.update_a_task = function(req, res) {\n  Task.findOneAndUpdate({_id: req.params.taskId}, req.body, {new: true}, function(err, task) {\n    if (err)\n      res.send(err);\n    res.json(task);\n  });\n};\n\n\nexports.delete_a_task = function(req, res) {\n\n\n  Task.remove({\n    _id: req.params.taskId\n  }, function(err, task) {\n    if (err)\n      res.send(err);\n    res.json({ message: 'Task successfully deleted' });\n  });\n};\n\n\n\nPutting everything together\nEarlier on, we had a minimal code for our server to be up and running in the server.js file.\nIn this section we will be connecting our handlers(controllers), database, the created models, body parser and the created routes together.\n\nOpen the server.js file created awhile ago and follow the following steps to put everything together.\nEssentially, you will be replacing the code in your server.js with the code snippet from this section\n\nConnect your database by adding a url to the mongoose instance connection\nLoad the created model - task\nInstall bodyParser and use\nbodyParser Parse incoming request bodies in a middleware before your handlers, available under the req.body property.\nIt exposes various factories to create middlewares. All middlewares will populate the req.bodyproperty with the parsed body, or an empty object ({}) if there was no body to parse (or an error was returned).\nRegister our created routes in the server\nvar express = require('express'),\n  app = express(),\n  port = process.env.PORT || 3000,\n  mongoose = require('mongoose'),\n  Task = require('./api/models/todoListModel'), //created model loading here\n  bodyParser = require('body-parser');\n  \n// mongoose instance connection url connection\nmongoose.Promise = global.Promise;\nmongoose.connect('mongodb://localhost/Tododb'); \n\n\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\n\nvar routes = require('./api/routes/todoListRoutes'); //importing route\nroutes(app); //register the route\n\n\napp.listen(port);\n\n\nconsole.log('todo list RESTful API server started on: ' + port);\n\n5.Start MongoDB Server\n\nOpen your terminal and run mongod\n\nThis will start your MongoDB server and then, node server could connect to the MongoDB instance. Once your MongoDB server is running, restart your node server by running: rs on your nodemon running terminal.\n\nTesting via Postman\nNow that everything is now connected, let’s test each of the routes and the respective methods.\n\nOpen your postman and type:\n\nhttp://localhost:3000/tasks in the enter request URL section and press enter.\nScreen Shot 2017-03-03 at 8.15.35 PM.png\nOn enter, you should see “[]” because there is nothing in the database yet.\nOn the same address, change the method to POST, click body and select “x-www-form-urlencoded”.\nThen, enter name as the key and the corresponding task name as value.\nAfter this, click on send button.\nThis should give you a response 200 ok\nScreen Shot 2017-03-03 at 8.12.55 PM.png\n\nAdding a middleware\nHaving done all these, what happens if we entered a wrong route? say you entered 'http://localhost:3000/task', It responds with a message “Cannot GET /task”. Let’s add express middleware which could be used to return more interactive messages.\n\nMiddlewares basically intercepts incoming http request and as such you can use them to perform several operations ranging from authentication to validations etc.\n\nTo do this, open your server.js file and paste the code snippet into it.\n\napp.use(function(req, res) {\n  res.status(404).send({url: req.originalUrl + ' not found'})\n});\nThe snippet above helps to redirect and respond whenever a wrong route is entered on the site.`,\n            ``,\n        ]\n    }, {\n        name: 'my-thoughts-on-resumes',\n        title: 'My Thoughts on Resumes',\n        content: [\n            `Today is the day I talk about something which scares most people: resumes.\n            In reality, I'm not sure why people have such a hard time with proin congue\n            ligula id risus posuere, vel eleifend ex egestas. Sed in turpis leo. \n            Aliquam malesuada in massa tincidunt egestas. Nam consectetur varius turpis, \n            non porta arcu porttitor non. In tincidunt vulputate nulla quis egestas. Ut \n            eleifend ut ipsum non fringilla. Praesent imperdiet nulla nec est luctus, at \n            sodales purus euismod.`,\n            `Donec vel mauris lectus. Etiam nec lectus urna. Sed sodales ultrices dapibus. \n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\n            `Etiam nec lectus urna. Sed sodales ultrices dapibus. \n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\n        ]\n    },\n];\n\nexport default articles;"]},"metadata":{},"sourceType":"module"}